generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String

  investments     Investment[]
  transactions    Transaction[]
  storages        Storage[]
  stakings        Staking[]
  ChartDataHourly ChartDataHourly[]
  ChartDataDaily  ChartDataDaily[]

  @@map("users")
}

model Investment {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @default(dbgenerated("(current_setting('app.current_user_id'::text))::uuid")) @db.Uuid

  coinId       String
  name         String
  symbol       String
  image        String
  currentPrice Float

  transactions Transaction[]
  storages     Storage[]
  stakings     Staking[]

  User            User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  ChartDataHourly ChartDataHourly[]
  ChartDataDaily  ChartDataDaily[]

  @@map("investments")
}

model Storage {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String @default(dbgenerated("(current_setting('app.current_user_id'::text))::uuid")) @db.Uuid
  investmentId String @db.Uuid

  amount   Float
  location StorageLocation @relation(fields: [storageLocationId], references: [id])
  date     DateTime

  investment        Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  User              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  storageLocationId String     @db.Uuid

  @@id([id, date])
  @@map("storages")
}

model StorageLocation {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @default(dbgenerated("(current_setting('app.current_user_id'::text))::uuid")) @db.Uuid

  name                String
  image               String
  storageLocationType StorageLocationType
  Storage             Storage[]
  Staking             Staking[]

  @@map("storage_locations")
}

model Staking {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String @default(dbgenerated("(current_setting('app.current_user_id'::text))::uuid")) @db.Uuid
  investmentId String @db.Uuid

  amount         Float
  location       StorageLocation @relation(fields: [storageLocationId], references: [id])
  websiteLink    String
  coolDownPeriod Int
  startDate      DateTime

  investment        Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  User              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  storageLocationId String     @db.Uuid

  @@id([id, startDate])
  @@map("stakings")
}

model Transaction {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String @default(dbgenerated("(current_setting('app.current_user_id'::text))::uuid")) @db.Uuid
  investmentId String @db.Uuid

  quantity Float
  price    Float
  date     DateTime
  type     TransactionType

  investment Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id, date])
  @@map("transactions")
}

model ChartDataHourly {
  id           Int    @default(autoincrement())
  userId       String @default(dbgenerated("(current_setting('app.current_user_id'::text))::uuid")) @db.Uuid
  investmentId String @db.Uuid

  timestamp DateTime
  price     Float

  investment Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id, timestamp])
  @@unique([investmentId, timestamp])
  @@map("chart_data_hourly")
}

model ChartDataDaily {
  id           Int    @default(autoincrement())
  userId       String @default(dbgenerated("(current_setting('app.current_user_id'::text))::uuid")) @db.Uuid
  investmentId String @db.Uuid

  timestamp DateTime
  price     Float

  investment Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id, timestamp])
  @@unique([investmentId, timestamp])
  @@map("chart_data_daily")
}

enum TransactionType {
  buy
  sell
}

enum StorageLocationType {
  hardwareWallet
  softwareWallet
  exchange
}
