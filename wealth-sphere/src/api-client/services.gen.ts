// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { InvestmentsControllerCreateInvestmentData, InvestmentsControllerDeleteInvestmentData, InvestmentsControllerGetInvestmentByIdData, InvestmentsControllerGetInvestmentBySymbolData, CoingeckoControllerGetAllMarketChartDataData, CoingeckoControllerGetMarketChartDataData, TransactionsControllerCreateTransactionData, TransactionsControllerGetAllTransactionsForInvestmentIdData, TransactionsControllerDeleteTransactionData, TransactionsControllerGetTransactionByIdData, TransactionsControllerUpdateTransactionData, StakingsControllerCreateStakingData, StakingsControllerDeleteStakingData, StakingsControllerGetStakingByIdData, StakingsControllerUpdateStakingData, StorageLocationsControllerCreateData, StorageLocationsControllerDeleteData, StorageLocationsControllerFindOneData, StorageLocationsControllerUpdateData, StorageControllerCreateData, StorageControllerDeleteData, StorageControllerFindOneData, StorageControllerUpdateData, StorageControllerFindByInvestmentData } from './types.gen';

export const client = createClient(createConfig());

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/'
    });
};

export const investmentsControllerGetAllInvestments = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/investments'
    });
};

export const investmentsControllerCreateInvestment = <ThrowOnError extends boolean = false>(options: Options<InvestmentsControllerCreateInvestmentData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/investments'
    });
};

export const investmentsControllerDeleteInvestment = <ThrowOnError extends boolean = false>(options: Options<InvestmentsControllerDeleteInvestmentData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/investments/{id}'
    });
};

export const investmentsControllerGetInvestmentById = <ThrowOnError extends boolean = false>(options: Options<InvestmentsControllerGetInvestmentByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/investments/{id}'
    });
};

export const investmentsControllerGetInvestmentBySymbol = <ThrowOnError extends boolean = false>(options: Options<InvestmentsControllerGetInvestmentBySymbolData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/investments/symbol/{symbol}'
    });
};

export const coingeckoControllerGetAllMarketChartData = <ThrowOnError extends boolean = false>(options: Options<CoingeckoControllerGetAllMarketChartDataData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/coingecko/market-chart'
    });
};

export const coingeckoControllerGetMarketChartData = <ThrowOnError extends boolean = false>(options: Options<CoingeckoControllerGetMarketChartDataData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/coingecko/market-chart/{coinId}'
    });
};

export const coingeckoControllerUpdateCoinPrices = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/coingecko/update-coin-prices'
    });
};

export const coingeckoControllerUpdateMarketChartData = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/coingecko/update-market-chart-data'
    });
};

export const transactionsControllerGetAllTransactions = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/transactions'
    });
};

export const transactionsControllerCreateTransaction = <ThrowOnError extends boolean = false>(options: Options<TransactionsControllerCreateTransactionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/transactions'
    });
};

export const transactionsControllerGetAllTransactionsForInvestmentId = <ThrowOnError extends boolean = false>(options: Options<TransactionsControllerGetAllTransactionsForInvestmentIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/transactions/investment/{id}'
    });
};

export const transactionsControllerDeleteTransaction = <ThrowOnError extends boolean = false>(options: Options<TransactionsControllerDeleteTransactionData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/transactions/{id}'
    });
};

export const transactionsControllerGetTransactionById = <ThrowOnError extends boolean = false>(options: Options<TransactionsControllerGetTransactionByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/transactions/{id}'
    });
};

export const transactionsControllerUpdateTransaction = <ThrowOnError extends boolean = false>(options: Options<TransactionsControllerUpdateTransactionData, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/transactions/{id}'
    });
};

export const stakingsControllerGetAllStakings = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/stakings'
    });
};

export const stakingsControllerCreateStaking = <ThrowOnError extends boolean = false>(options: Options<StakingsControllerCreateStakingData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/stakings'
    });
};

export const stakingsControllerDeleteStaking = <ThrowOnError extends boolean = false>(options: Options<StakingsControllerDeleteStakingData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/stakings/{id}'
    });
};

export const stakingsControllerGetStakingById = <ThrowOnError extends boolean = false>(options: Options<StakingsControllerGetStakingByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/stakings/{id}'
    });
};

export const stakingsControllerUpdateStaking = <ThrowOnError extends boolean = false>(options: Options<StakingsControllerUpdateStakingData, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/stakings/{id}'
    });
};

export const storageLocationsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/storage-locations'
    });
};

export const storageLocationsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<StorageLocationsControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/storage-locations'
    });
};

export const storageLocationsControllerDelete = <ThrowOnError extends boolean = false>(options: Options<StorageLocationsControllerDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/storage-locations/{id}'
    });
};

export const storageLocationsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<StorageLocationsControllerFindOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/storage-locations/{id}'
    });
};

export const storageLocationsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<StorageLocationsControllerUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/storage-locations/{id}'
    });
};

export const storageControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/storages'
    });
};

export const storageControllerCreate = <ThrowOnError extends boolean = false>(options: Options<StorageControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/storages'
    });
};

export const storageControllerDelete = <ThrowOnError extends boolean = false>(options: Options<StorageControllerDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/storages/{id}'
    });
};

export const storageControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<StorageControllerFindOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/storages/{id}'
    });
};

export const storageControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<StorageControllerUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/storages/{id}'
    });
};

export const storageControllerFindByInvestment = <ThrowOnError extends boolean = false>(options: Options<StorageControllerFindByInvestmentData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/storages/investment/{investmentId}'
    });
};