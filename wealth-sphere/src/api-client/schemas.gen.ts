// This file is auto-generated by @hey-api/openapi-ts

export const TransactionEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        userId: {
            type: 'string'
        },
        investmentId: {
            type: 'string'
        },
        quantity: {
            type: 'number'
        },
        price: {
            type: 'number'
        },
        date: {
            format: 'date-time',
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['buy', 'sell']
        }
    },
    required: ['id', 'userId', 'investmentId', 'quantity', 'price', 'date', 'type']
} as const;

export const StorageLocationEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        userId: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        image: {
            type: 'string'
        },
        storageLocationType: {
            type: 'string',
            enum: ['hardwareWallet', 'softwareWallet', 'exchange']
        }
    },
    required: ['id', 'userId', 'name', 'image', 'storageLocationType']
} as const;

export const StorageEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        userId: {
            type: 'string'
        },
        investmentId: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        date: {
            format: 'date-time',
            type: 'string'
        },
        storageLocationId: {
            type: 'string'
        },
        location: {
            '$ref': '#/components/schemas/StorageLocationEntity'
        }
    },
    required: ['id', 'userId', 'investmentId', 'amount', 'date', 'storageLocationId', 'location']
} as const;

export const StakingEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        userId: {
            type: 'string'
        },
        investmentId: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        websiteLink: {
            type: 'string'
        },
        coolDownPeriod: {
            type: 'number'
        },
        startDate: {
            format: 'date-time',
            type: 'string'
        },
        storageLocationId: {
            type: 'string'
        },
        location: {
            '$ref': '#/components/schemas/StorageLocationEntity'
        }
    },
    required: ['id', 'userId', 'investmentId', 'amount', 'websiteLink', 'coolDownPeriod', 'startDate', 'storageLocationId', 'location']
} as const;

export const InvestmentEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        userId: {
            type: 'string'
        },
        coinId: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        symbol: {
            type: 'string'
        },
        image: {
            type: 'string'
        },
        currentPrice: {
            type: 'number'
        },
        transactions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TransactionEntity'
            }
        },
        storages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StorageEntity'
            }
        },
        stakings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StakingEntity'
            }
        }
    },
    required: ['id', 'userId', 'coinId', 'name', 'symbol', 'image', 'currentPrice', 'transactions', 'storages', 'stakings']
} as const;

export const CreateInvestmentDtoSchema = {
    type: 'object',
    properties: {
        coinId: {
            type: 'string'
        }
    },
    required: ['coinId']
} as const;

export const ChartDataEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        userId: {
            type: 'string'
        },
        investmentId: {
            type: 'string'
        },
        timestamp: {
            format: 'date-time',
            type: 'string'
        },
        price: {
            type: 'number'
        }
    },
    required: ['id', 'userId', 'investmentId', 'timestamp', 'price']
} as const;

export const CreateTransactionDtoSchema = {
    type: 'object',
    properties: {
        investmentId: {
            type: 'string'
        },
        quantity: {
            type: 'number'
        },
        price: {
            type: 'number'
        },
        date: {
            type: 'string',
            format: 'date-time'
        },
        type: {
            type: 'string',
            enum: ['buy', 'sell']
        }
    },
    required: ['investmentId', 'quantity', 'price', 'date', 'type']
} as const;

export const UpdateTransactionDtoSchema = {
    type: 'object',
    properties: {
        quantity: {
            type: 'number'
        },
        price: {
            type: 'number'
        },
        date: {
            type: 'string',
            format: 'date-time'
        },
        type: {
            type: 'string',
            enum: ['buy', 'sell']
        }
    }
} as const;

export const CreateStakingDtoSchema = {
    type: 'object',
    properties: {
        investmentId: {
            type: 'string',
            format: 'uuid'
        },
        amount: {
            type: 'number',
            exclusiveMinimum: 0
        },
        storageLocationId: {
            type: 'string',
            format: 'uuid'
        },
        websiteLink: {
            type: 'string'
        },
        coolDownPeriod: {
            type: 'number',
            exclusiveMinimum: 0
        },
        startDate: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['investmentId', 'amount', 'storageLocationId', 'websiteLink', 'coolDownPeriod', 'startDate']
} as const;

export const UpdateStakingDtoSchema = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            exclusiveMinimum: 0
        },
        storageLocationId: {
            type: 'string',
            format: 'uuid'
        },
        websiteLink: {
            type: 'string'
        },
        coolDownPeriod: {
            type: 'number',
            exclusiveMinimum: 0
        },
        startDate: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const CreateStorageLocationDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1
        },
        image: {
            type: 'string',
            minLength: 1
        },
        storageLocationType: {
            type: 'string',
            enum: ['hardwareWallet', 'softwareWallet', 'exchange']
        }
    },
    required: ['name', 'image', 'storageLocationType']
} as const;

export const UpdateStorageLocationDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        image: {
            type: 'string'
        },
        storageLocationType: {
            type: 'string',
            enum: ['hardwareWallet', 'softwareWallet', 'exchange']
        }
    }
} as const;

export const CreateStorageDtoSchema = {
    type: 'object',
    properties: {
        investmentId: {
            type: 'string',
            format: 'uuid'
        },
        amount: {
            type: 'number',
            exclusiveMinimum: 0
        },
        storageLocationId: {
            type: 'string',
            format: 'uuid'
        },
        date: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['investmentId', 'amount', 'storageLocationId', 'date']
} as const;

export const UpdateStorageDtoSchema = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            exclusiveMinimum: 0
        },
        storageLocationId: {
            type: 'string',
            format: 'uuid'
        },
        date: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['amount', 'storageLocationId', 'date']
} as const;

export const StorageAllocationEntitySchema = {
    type: 'object',
    properties: {
        locationId: {
            type: 'string'
        },
        locationName: {
            type: 'string'
        },
        totalAmount: {
            type: 'number'
        },
        percentage: {
            type: 'number'
        }
    },
    required: ['locationId', 'locationName', 'totalAmount', 'percentage']
} as const;

export const InvestmentAggregateSchema = {
    type: 'object',
    properties: {
        investmentId: {
            type: 'string'
        },
        totalQuantity: {
            type: 'number'
        },
        totalValue: {
            type: 'number'
        }
    },
    required: ['investmentId', 'totalQuantity', 'totalValue']
} as const;

export const PortfolioHistoryEntitySchema = {
    type: 'object',
    properties: {
        date: {
            type: 'string'
        },
        totalValue: {
            type: 'number'
        },
        investments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InvestmentAggregate'
            }
        }
    },
    required: ['date', 'totalValue', 'investments']
} as const;