// This file is auto-generated by @hey-api/openapi-ts

export type type = 'buy' | 'sell';

export const type = {
    BUY: 'buy',
    SELL: 'sell'
} as const;

export type TransactionEntity = {
    id: string;
    userId: string;
    investmentId: string;
    quantity: number;
    price: number;
    date: Date;
    type: 'buy' | 'sell';
};

export type storageLocationType = 'hardwareWallet' | 'softwareWallet' | 'exchange';

export const storageLocationType = {
    HARDWAREWALLET: 'hardwareWallet',
    SOFTWAREWALLET: 'softwareWallet',
    EXCHANGE: 'exchange'
} as const;

export type StorageLocationEntity = {
    id: string;
    userId: string;
    name: string;
    image: string;
    storageLocationType: 'hardwareWallet' | 'softwareWallet' | 'exchange';
};

export type StorageEntity = {
    id: string;
    userId: string;
    investmentId: string;
    amount: number;
    date: Date;
    storageLocationId: string;
    location: StorageLocationEntity;
};

export type StakingEntity = {
    id: string;
    userId: string;
    investmentId: string;
    amount: number;
    websiteLink: string;
    coolDownPeriod: number;
    startDate: Date;
    storageLocationId: string;
    location: StorageLocationEntity;
};

export type InvestmentEntity = {
    id: string;
    userId: string;
    coinId: string;
    name: string;
    symbol: string;
    image: string;
    currentPrice: number;
    transactions: Array<TransactionEntity>;
    storages: Array<StorageEntity>;
    stakings: Array<StakingEntity>;
};

export type CreateInvestmentDto = {
    coinId: string;
};

export type ChartDataEntity = {
    id: number;
    userId: string;
    investmentId: string;
    timestamp: Date;
    price: number;
};

export type CreateTransactionDto = {
    investmentId: string;
    quantity: number;
    price: number;
    date: Date;
    type: 'buy' | 'sell';
};

export type UpdateTransactionDto = {
    quantity?: number;
    price?: number;
    date?: Date;
    type?: 'buy' | 'sell';
};

export type CreateStakingDto = {
    investmentId: string;
    amount: number;
    storageLocationId: string;
    websiteLink: string;
    coolDownPeriod: number;
    startDate: Date;
};

export type UpdateStakingDto = {
    amount?: number;
    storageLocationId?: string;
    websiteLink?: string;
    coolDownPeriod?: number;
    startDate?: Date;
};

export type CreateStorageLocationDto = {
    name: string;
    image: string;
    storageLocationType: 'hardwareWallet' | 'softwareWallet' | 'exchange';
};

export type UpdateStorageLocationDto = {
    name?: string;
    image?: string;
    storageLocationType?: 'hardwareWallet' | 'softwareWallet' | 'exchange';
};

export type CreateStorageDto = {
    investmentId: string;
    amount: number;
    storageLocationId: string;
    date: Date;
};

export type UpdateStorageDto = {
    amount: number;
    storageLocationId: string;
    date: Date;
};

export type StorageAllocationEntity = {
    locationId: string;
    locationName: string;
    totalAmount: number;
    percentage: number;
};

export type InvestmentAggregate = {
    investmentId: string;
    totalQuantity: number;
    totalValue: number;
};

export type PortfolioHistoryEntity = {
    date: string;
    totalValue: number;
    investments: Array<InvestmentAggregate>;
};

export type InvestmentsControllerGetAllInvestmentsResponse = Array<InvestmentEntity>;

export type InvestmentsControllerCreateInvestmentData = {
    body: CreateInvestmentDto;
};

export type InvestmentsControllerCreateInvestmentResponse = InvestmentEntity;

export type InvestmentsControllerDeleteInvestmentData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
};

export type InvestmentsControllerGetInvestmentByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
};

export type InvestmentsControllerGetInvestmentByIdResponse = InvestmentEntity;

export type InvestmentsControllerGetInvestmentBySymbolData = {
    body?: never;
    path: {
        symbol: string;
    };
    query?: never;
};

export type InvestmentsControllerGetInvestmentBySymbolResponse = InvestmentEntity;

export type CoingeckoControllerGetAllMarketChartDataData = {
    body?: never;
    path?: never;
    query: {
        days: string;
    };
};

export type CoingeckoControllerGetAllMarketChartDataResponse = Array<ChartDataEntity>;

export type CoingeckoControllerGetMarketChartDataData = {
    body?: never;
    path: {
        coinId: string;
    };
    query: {
        days: number;
    };
};

export type CoingeckoControllerGetMarketChartDataResponse = Array<ChartDataEntity>;

export type CoingeckoControllerUpdateCoinPricesResponse = void;

export type CoingeckoControllerUpdateMarketChartDataResponse = void;

export type TransactionsControllerGetAllTransactionsResponse = Array<TransactionEntity>;

export type TransactionsControllerCreateTransactionData = {
    body: CreateTransactionDto;
};

export type TransactionsControllerCreateTransactionResponse = TransactionEntity;

export type TransactionsControllerGetAllTransactionsForInvestmentIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
};

export type TransactionsControllerGetAllTransactionsForInvestmentIdResponse = Array<TransactionEntity>;

export type TransactionsControllerDeleteTransactionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
};

export type TransactionsControllerGetTransactionByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
};

export type TransactionsControllerGetTransactionByIdResponse = TransactionEntity;

export type TransactionsControllerUpdateTransactionData = {
    body: UpdateTransactionDto;
    path: {
        id: string;
    };
    query?: never;
};

export type TransactionsControllerUpdateTransactionResponse = TransactionEntity;

export type StakingsControllerGetAllStakingsResponse = Array<StakingEntity>;

export type StakingsControllerCreateStakingData = {
    body: CreateStakingDto;
};

export type StakingsControllerCreateStakingResponse = StakingEntity;

export type StakingsControllerDeleteStakingData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
};

export type StakingsControllerGetStakingByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
};

export type StakingsControllerGetStakingByIdResponse = StakingEntity;

export type StakingsControllerUpdateStakingData = {
    body: UpdateStakingDto;
    path: {
        id: string;
    };
    query?: never;
};

export type StakingsControllerUpdateStakingResponse = StakingEntity;

export type StorageLocationsControllerFindAllResponse = Array<StorageLocationEntity>;

export type StorageLocationsControllerCreateData = {
    body: CreateStorageLocationDto;
};

export type StorageLocationsControllerCreateResponse = StorageLocationEntity;

export type StorageLocationsControllerDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
};

export type StorageLocationsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
};

export type StorageLocationsControllerFindOneResponse = StorageLocationEntity;

export type StorageLocationsControllerUpdateData = {
    body: UpdateStorageLocationDto;
    path: {
        id: string;
    };
    query?: never;
};

export type StorageLocationsControllerUpdateResponse = StorageLocationEntity;

export type StorageControllerFindAllResponse = Array<StorageEntity>;

export type StorageControllerCreateData = {
    body: CreateStorageDto;
};

export type StorageControllerCreateResponse = StorageEntity;

export type StorageControllerDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
};

export type StorageControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
};

export type StorageControllerFindOneResponse = StorageEntity;

export type StorageControllerUpdateData = {
    body: UpdateStorageDto;
    path: {
        id: string;
    };
    query?: never;
};

export type StorageControllerGetAllocationByLocationResponse = Array<StorageAllocationEntity>;

export type PortfolioControllerGetPortfolioHistoryData = {
    body?: never;
    path?: never;
    query: {
        days: number;
    };
};

export type PortfolioControllerGetPortfolioHistoryResponse = Array<PortfolioHistoryEntity>;

export type BlockchainCenterControllerGetAltcoinSeasonIndexResponse = {
    altcoinSeason?: number;
    month?: number;
    year?: number;
};