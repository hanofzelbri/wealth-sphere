// This file is auto-generated by @hey-api/openapi-ts

import type { InvestmentsControllerGetAllInvestmentsResponse, InvestmentsControllerCreateInvestmentResponse, InvestmentsControllerGetInvestmentByIdResponse, InvestmentsControllerGetInvestmentBySymbolResponse, TransactionsControllerGetAllTransactionsResponse, TransactionsControllerCreateTransactionResponse, TransactionsControllerGetAllTransactionsForInvestmentIdResponse, TransactionsControllerGetTransactionByIdResponse, TransactionsControllerUpdateTransactionResponse, StakingsControllerGetAllStakingsResponse, StakingsControllerCreateStakingResponse, StakingsControllerGetStakingByIdResponse, StakingsControllerUpdateStakingResponse, StorageLocationsControllerFindAllResponse, StorageLocationsControllerCreateResponse, StorageLocationsControllerFindOneResponse, StorageLocationsControllerUpdateResponse, StorageControllerFindAllResponse, StorageControllerCreateResponse, StorageControllerFindOneResponse, StorageControllerUpdateResponse } from './types.gen';

const transactionEntitySchemaResponseTransformer = (data: any) => {
    data.date = new Date(data.date);
    return data;
};

const storageEntitySchemaResponseTransformer = (data: any) => {
    data.date = new Date(data.date);
    return data;
};

const stakingEntitySchemaResponseTransformer = (data: any) => {
    data.startDate = new Date(data.startDate);
    return data;
};

const investmentEntitySchemaResponseTransformer = (data: any) => {
    data.transactions = data.transactions.map(item => {
        return transactionEntitySchemaResponseTransformer(item);
    });
    data.storages = data.storages.map(item => {
        return storageEntitySchemaResponseTransformer(item);
    });
    data.stakings = data.stakings.map(item => {
        return stakingEntitySchemaResponseTransformer(item);
    });
    return data;
};

export const investmentsControllerGetAllInvestmentsResponseTransformer = async (data: any): Promise<InvestmentsControllerGetAllInvestmentsResponse> => {
    data = data.map(item => {
        return investmentEntitySchemaResponseTransformer(item);
    });
    return data;
};

export const investmentsControllerCreateInvestmentResponseTransformer = async (data: any): Promise<InvestmentsControllerCreateInvestmentResponse> => {
    data = investmentEntitySchemaResponseTransformer(data);
    return data;
};

export const investmentsControllerGetInvestmentByIdResponseTransformer = async (data: any): Promise<InvestmentsControllerGetInvestmentByIdResponse> => {
    data = investmentEntitySchemaResponseTransformer(data);
    return data;
};

export const investmentsControllerGetInvestmentBySymbolResponseTransformer = async (data: any): Promise<InvestmentsControllerGetInvestmentBySymbolResponse> => {
    data = investmentEntitySchemaResponseTransformer(data);
    return data;
};

export const transactionsControllerGetAllTransactionsResponseTransformer = async (data: any): Promise<TransactionsControllerGetAllTransactionsResponse> => {
    data = data.map(item => {
        return transactionEntitySchemaResponseTransformer(item);
    });
    return data;
};

export const transactionsControllerCreateTransactionResponseTransformer = async (data: any): Promise<TransactionsControllerCreateTransactionResponse> => {
    data = transactionEntitySchemaResponseTransformer(data);
    return data;
};

export const transactionsControllerGetAllTransactionsForInvestmentIdResponseTransformer = async (data: any): Promise<TransactionsControllerGetAllTransactionsForInvestmentIdResponse> => {
    data = data.map(item => {
        return transactionEntitySchemaResponseTransformer(item);
    });
    return data;
};

export const transactionsControllerGetTransactionByIdResponseTransformer = async (data: any): Promise<TransactionsControllerGetTransactionByIdResponse> => {
    data = transactionEntitySchemaResponseTransformer(data);
    return data;
};

export const transactionsControllerUpdateTransactionResponseTransformer = async (data: any): Promise<TransactionsControllerUpdateTransactionResponse> => {
    data = transactionEntitySchemaResponseTransformer(data);
    return data;
};

export const stakingsControllerGetAllStakingsResponseTransformer = async (data: any): Promise<StakingsControllerGetAllStakingsResponse> => {
    data = data.map(item => {
        return stakingEntitySchemaResponseTransformer(item);
    });
    return data;
};

export const stakingsControllerCreateStakingResponseTransformer = async (data: any): Promise<StakingsControllerCreateStakingResponse> => {
    data = stakingEntitySchemaResponseTransformer(data);
    return data;
};

export const stakingsControllerGetStakingByIdResponseTransformer = async (data: any): Promise<StakingsControllerGetStakingByIdResponse> => {
    data = stakingEntitySchemaResponseTransformer(data);
    return data;
};

export const stakingsControllerUpdateStakingResponseTransformer = async (data: any): Promise<StakingsControllerUpdateStakingResponse> => {
    data = stakingEntitySchemaResponseTransformer(data);
    return data;
};

const storageLocationResponseDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const storageLocationsControllerFindAllResponseTransformer = async (data: any): Promise<StorageLocationsControllerFindAllResponse> => {
    data = data.map(item => {
        return storageLocationResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const storageLocationsControllerCreateResponseTransformer = async (data: any): Promise<StorageLocationsControllerCreateResponse> => {
    data = storageLocationResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const storageLocationsControllerFindOneResponseTransformer = async (data: any): Promise<StorageLocationsControllerFindOneResponse> => {
    data = storageLocationResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const storageLocationsControllerUpdateResponseTransformer = async (data: any): Promise<StorageLocationsControllerUpdateResponse> => {
    data = storageLocationResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const storageControllerFindAllResponseTransformer = async (data: any): Promise<StorageControllerFindAllResponse> => {
    data = data.map(item => {
        return storageEntitySchemaResponseTransformer(item);
    });
    return data;
};

export const storageControllerCreateResponseTransformer = async (data: any): Promise<StorageControllerCreateResponse> => {
    data = storageEntitySchemaResponseTransformer(data);
    return data;
};

export const storageControllerFindOneResponseTransformer = async (data: any): Promise<StorageControllerFindOneResponse> => {
    data = storageEntitySchemaResponseTransformer(data);
    return data;
};

export const storageControllerUpdateResponseTransformer = async (data: any): Promise<StorageControllerUpdateResponse> => {
    data = storageEntitySchemaResponseTransformer(data);
    return data;
};